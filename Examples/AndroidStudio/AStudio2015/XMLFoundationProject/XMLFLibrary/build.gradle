// XMLFLibrary
apply plugin: 'com.android.model.library'

Properties properties = new Properties()
properties.load(project.rootProject.file('XMLFoundationBuildPath.properties').newDataInputStream())
def xmlfPath = properties.getProperty('XMLFoundation.dir')

model {

    repositories {


        libs(PrebuiltLibraries) {
            ssllib { // this is where you declare the "ssllib" static library

                //  headers.srcDir "${xmlfPath}/Libraries/openssl/bin-android-${targetPlatform.getName()}/"

                // attaching library files, one for each platform
                binaries.withType(StaticLibraryBinary) {
                    def libsslPath = "${xmlfPath}/Libraries/openssl/bin-android-${targetPlatform.getName()}/libssl.a"
                    staticLibraryFile = file("${libsslPath}")
                }
            } // end of ssllib

        } // end of libs



        libs(PrebuiltLibraries) {
            cryptolib {
                binaries.withType(StaticLibraryBinary) {
                    def cryptoPath = "${xmlfPath}/Libraries/openssl/bin-android-${targetPlatform.getName()}/libcrypto.a"
                    staticLibraryFile = file("${cryptoPath}")
                }
            }
        }






    }


    android {
        compileSdkVersion 23
        buildToolsVersion "23.0.3"

        defaultConfig.with {
            minSdkVersion.apiLevel 13
            targetSdkVersion.apiLevel 23
        }


        ndk {
            platformVersion = 9
            moduleName = 'XMLFLibrary'
            toolchain = 'clang'
            stl = 'gnustl_static'

//              cppFlags.addAll(['-I' + "${ndkDir}/sources/android/cpufeatures", '-I' + file('src/main/jni/ndk_helper')])
//              cppFlags.addAll(['-std=c++11', '-Wall','-fno-exceptions', '-fno-rtti'])


            // add multiple compiler flags
            // '-march=native'
            cppFlags.addAll(['-frtti', '-fexceptions', '-c', '-O3', '-w', '-D_LINUX', '-D_ANDROID', '-fpermissive']) // , '--pre-include gcc-compat.h'

//   When I know the syntax to add it properly in this build system, it will be something like this....
            println("-I${xmlfPath}/Libraries/XMLFoundation/inc")
//            def xmlfPath1 = "-I${xmlfPath}/Libraries/XMLFoundation/inc"
//            cppFlags.add("${xmlfPath1}")
//
//            cppFlags.add("-I${xmlfPath}/Libraries/XMLFoundation/inc")
//
//            cppFlags.add('${xmlfIncPath}')
///////////////////////////////////////////////////////////////////////////////////////////////
//
// SETUP-YOUR-BUILD
//
//            cppFlags.add('-I/home/user/XMLFoundation/Libraries/XMLFoundation/inc')
//            cppFlags.add('-I/home/user/XMLFoundation/Libraries/XMLFoundation/src')
//            cppFlags.add('-I/home/user/XMLFoundation/Servers/Core')
//            cppFlags.add('-I/home/user/XMLFoundation/Libraries/openssl/bin-android-x86')

            cppFlags.add('-IC:\\XMLFoundation/Libraries/XMLFoundation/inc')
            cppFlags.add('-IC:\\XMLFoundation/Libraries/XMLFoundation/src')
            cppFlags.add('-IC:\\XMLFoundation/Servers/Core')
            cppFlags.add('-IC:\\XMLFoundation/Libraries/openssl/bin-android-armeabi-v7a')
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//          cppFlags.add('-IC:\\XMLFoundation\\Libraries\\openssl\\bin-android-armeabi-v7a')
//          cppFlags.add('-IC:\\XMLFoundation/Libraries/openssl/bin-android-x86')
            // this sets the path so that #include <openssl/file.h> will be found where the declarations used on the armv7 build of openssl
            // this happens to work with the x86 binaries, but for technical correctness during the build, the headers should match the binary.
            // how is this accomplished with this build process?
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///           NOTE:the sources.main.jni.dependencies (below) causes a link to : (the proper two libs per build architecture )
//             We could select a single platform and force the path like this....
//            ldLibs.addAll(['c:\\XMLFoundation\\Libraries\\openssl\\bin-android-armeabi-v7a\\libssl.a',
//                           'c:\\XMLFoundation\\Libraries\\openssl\\bin-android-armeabi-v7a\\libcrypto.a'])//
//            abiFilters.addAll(['armeabi-v7a'] )
//                                           ...or like this for x86
//          ldLibs.addAll(['c:\\XMLFoundation\\Libraries\\openssl\\bin-android-x86\\libssl.a',
//                         'c:\\XMLFoundation\\Libraries\\openssl\\bin-android-x86\\libcrypto.a'])
//            abiFilters.addAll(['x86'] )
// NOTE: if you were to build for just a single platform, and specify the libs, you would want to remove the following static links from dependencies.
//            library "ssllib" linkage "static"
//            library "cryptolib" linkage "static"
//
//
            // however we will not specify the openssl libs here.....
            ldLibs.addAll(['c', 'android', 'dl', 'log','atomic'])
            // ....because there is one set per platform   see: sources.main.jni.dependencies and cooresponding model.repositories.
            abiFilters.addAll(['armeabi', 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'])

        }


        sources.main {
            jni {

                source {
//                  srcDirs 'src/main/jni' do not need to be specified - so this is just FYI - thats the library source file
                    println("***************** ${xmlfPath} **************************************")
                    file('src/main/jni/XMLFLibrary.cpp')
                }
                dependencies {
                    library "ssllib" linkage "static"
                    library "cryptolib" linkage "static"
                }
            }
        }



        dependencies {

        }


    }
}
